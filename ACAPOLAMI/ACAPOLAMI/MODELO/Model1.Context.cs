//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ACAPOLAMI.MODELO
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ACAPOLAMIEntities : DbContext
    {
        public ACAPOLAMIEntities()
            : base("name=ACAPOLAMIEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Comunidades> Comunidades { get; set; }
        public virtual DbSet<Consumidores> Consumidores { get; set; }
        public virtual DbSet<Estados> Estados { get; set; }
        public virtual DbSet<Pagos> Pagos { get; set; }
        public virtual DbSet<Sucesos> Sucesos { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
    
        public virtual int sp_ActualizarConsumidor(Nullable<int> id, string nombres, string apellidos, string dui, string telefono, Nullable<int> idComunidad, string correo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var duiParameter = dui != null ?
                new ObjectParameter("dui", dui) :
                new ObjectParameter("dui", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var idComunidadParameter = idComunidad.HasValue ?
                new ObjectParameter("idComunidad", idComunidad) :
                new ObjectParameter("idComunidad", typeof(int));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActualizarConsumidor", idParameter, nombresParameter, apellidosParameter, duiParameter, telefonoParameter, idComunidadParameter, correoParameter);
        }
    
        public virtual int sp_EliminarConsumidor(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminarConsumidor", idParameter);
        }
    
        public virtual int sp_InsertarConsumidores(string nombres, string apellidos, string dui, string telefono, string correo, Nullable<int> idComunidad)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var duiParameter = dui != null ?
                new ObjectParameter("dui", dui) :
                new ObjectParameter("dui", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var idComunidadParameter = idComunidad.HasValue ?
                new ObjectParameter("idComunidad", idComunidad) :
                new ObjectParameter("idComunidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarConsumidores", nombresParameter, apellidosParameter, duiParameter, telefonoParameter, correoParameter, idComunidadParameter);
        }
    
        public virtual ObjectResult<sp_MostrarClientesId_Result> sp_MostrarClientesId(Nullable<int> idComunidad)
        {
            var idComunidadParameter = idComunidad.HasValue ?
                new ObjectParameter("idComunidad", idComunidad) :
                new ObjectParameter("idComunidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MostrarClientesId_Result>("sp_MostrarClientesId", idComunidadParameter);
        }
    
        public virtual ObjectResult<sp_MostrarConsumidores_Result> sp_MostrarConsumidores()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MostrarConsumidores_Result>("sp_MostrarConsumidores");
        }
    }
}
